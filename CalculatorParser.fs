// Implementation file for parser generated by fsyacc
module CalculatorParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "CalculatorParser.fsp"

open CalculatorTypesAST

# 10 "CalculatorParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | IFSTART
  | IFEND
  | DOSTART
  | DOEND
  | SCOLUMN
  | DEFINE
  | SKIP
  | TRUE
  | FALSE
  | OR
  | AND
  | OROR
  | ANDAND
  | NOT
  | NOTEQUAL
  | EQUAL
  | BIGGER
  | SMALLER
  | LSPAR
  | RSPAR
  | SMALLEREQUAL
  | BIGGEREQUAL
  | ARROW
  | NAME of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_IFSTART
    | TOKEN_IFEND
    | TOKEN_DOSTART
    | TOKEN_DOEND
    | TOKEN_SCOLUMN
    | TOKEN_DEFINE
    | TOKEN_SKIP
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_OROR
    | TOKEN_ANDAND
    | TOKEN_NOT
    | TOKEN_NOTEQUAL
    | TOKEN_EQUAL
    | TOKEN_BIGGER
    | TOKEN_SMALLER
    | TOKEN_LSPAR
    | TOKEN_RSPAR
    | TOKEN_SMALLEREQUAL
    | TOKEN_BIGGEREQUAL
    | TOKEN_ARROW
    | TOKEN_NAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression0
    | NONTERM_expression1
    | NONTERM_expression2
    | NONTERM_expression3
    | NONTERM_Name
    | NONTERM_boolean0
    | NONTERM_boolean1
    | NONTERM_boolean2
    | NONTERM_boolean3
    | NONTERM_command0
    | NONTERM_command1
    | NONTERM_guardedC
    | NONTERM_guardedC1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | EOF  -> 7 
  | IFSTART  -> 8 
  | IFEND  -> 9 
  | DOSTART  -> 10 
  | DOEND  -> 11 
  | SCOLUMN  -> 12 
  | DEFINE  -> 13 
  | SKIP  -> 14 
  | TRUE  -> 15 
  | FALSE  -> 16 
  | OR  -> 17 
  | AND  -> 18 
  | OROR  -> 19 
  | ANDAND  -> 20 
  | NOT  -> 21 
  | NOTEQUAL  -> 22 
  | EQUAL  -> 23 
  | BIGGER  -> 24 
  | SMALLER  -> 25 
  | LSPAR  -> 26 
  | RSPAR  -> 27 
  | SMALLEREQUAL  -> 28 
  | BIGGEREQUAL  -> 29 
  | ARROW  -> 30 
  | NAME _ -> 31 
  | NUM _ -> 32 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_EOF 
  | 8 -> TOKEN_IFSTART 
  | 9 -> TOKEN_IFEND 
  | 10 -> TOKEN_DOSTART 
  | 11 -> TOKEN_DOEND 
  | 12 -> TOKEN_SCOLUMN 
  | 13 -> TOKEN_DEFINE 
  | 14 -> TOKEN_SKIP 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_OR 
  | 18 -> TOKEN_AND 
  | 19 -> TOKEN_OROR 
  | 20 -> TOKEN_ANDAND 
  | 21 -> TOKEN_NOT 
  | 22 -> TOKEN_NOTEQUAL 
  | 23 -> TOKEN_EQUAL 
  | 24 -> TOKEN_BIGGER 
  | 25 -> TOKEN_SMALLER 
  | 26 -> TOKEN_LSPAR 
  | 27 -> TOKEN_RSPAR 
  | 28 -> TOKEN_SMALLEREQUAL 
  | 29 -> TOKEN_BIGGEREQUAL 
  | 30 -> TOKEN_ARROW 
  | 31 -> TOKEN_NAME 
  | 32 -> TOKEN_NUM 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression0 
    | 3 -> NONTERM_expression0 
    | 4 -> NONTERM_expression0 
    | 5 -> NONTERM_expression1 
    | 6 -> NONTERM_expression1 
    | 7 -> NONTERM_expression1 
    | 8 -> NONTERM_expression2 
    | 9 -> NONTERM_expression2 
    | 10 -> NONTERM_expression3 
    | 11 -> NONTERM_expression3 
    | 12 -> NONTERM_expression3 
    | 13 -> NONTERM_expression3 
    | 14 -> NONTERM_expression3 
    | 15 -> NONTERM_Name 
    | 16 -> NONTERM_Name 
    | 17 -> NONTERM_boolean0 
    | 18 -> NONTERM_boolean0 
    | 19 -> NONTERM_boolean0 
    | 20 -> NONTERM_boolean1 
    | 21 -> NONTERM_boolean1 
    | 22 -> NONTERM_boolean1 
    | 23 -> NONTERM_boolean2 
    | 24 -> NONTERM_boolean2 
    | 25 -> NONTERM_boolean3 
    | 26 -> NONTERM_boolean3 
    | 27 -> NONTERM_boolean3 
    | 28 -> NONTERM_boolean3 
    | 29 -> NONTERM_boolean3 
    | 30 -> NONTERM_boolean3 
    | 31 -> NONTERM_boolean3 
    | 32 -> NONTERM_boolean3 
    | 33 -> NONTERM_boolean3 
    | 34 -> NONTERM_command0 
    | 35 -> NONTERM_command0 
    | 36 -> NONTERM_command1 
    | 37 -> NONTERM_command1 
    | 38 -> NONTERM_command1 
    | 39 -> NONTERM_command1 
    | 40 -> NONTERM_guardedC 
    | 41 -> NONTERM_guardedC 
    | 42 -> NONTERM_guardedC1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | IFSTART  -> "IFSTART" 
  | IFEND  -> "IFEND" 
  | DOSTART  -> "DOSTART" 
  | DOEND  -> "DOEND" 
  | SCOLUMN  -> "SCOLUMN" 
  | DEFINE  -> "DEFINE" 
  | SKIP  -> "SKIP" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | OROR  -> "OROR" 
  | ANDAND  -> "ANDAND" 
  | NOT  -> "NOT" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | EQUAL  -> "EQUAL" 
  | BIGGER  -> "BIGGER" 
  | SMALLER  -> "SMALLER" 
  | LSPAR  -> "LSPAR" 
  | RSPAR  -> "RSPAR" 
  | SMALLEREQUAL  -> "SMALLEREQUAL" 
  | BIGGEREQUAL  -> "BIGGEREQUAL" 
  | ARROW  -> "ARROW" 
  | NAME _ -> "NAME" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | IFSTART  -> (null : System.Object) 
  | IFEND  -> (null : System.Object) 
  | DOSTART  -> (null : System.Object) 
  | DOEND  -> (null : System.Object) 
  | SCOLUMN  -> (null : System.Object) 
  | DEFINE  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OROR  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | BIGGER  -> (null : System.Object) 
  | SMALLER  -> (null : System.Object) 
  | LSPAR  -> (null : System.Object) 
  | RSPAR  -> (null : System.Object) 
  | SMALLEREQUAL  -> (null : System.Object) 
  | BIGGEREQUAL  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 18us; 65535us; 33us; 4us; 34us; 5us; 38us; 6us; 42us; 7us; 44us; 7us; 47us; 7us; 49us; 7us; 52us; 7us; 57us; 8us; 58us; 9us; 59us; 10us; 60us; 11us; 61us; 12us; 62us; 13us; 68us; 14us; 69us; 7us; 72us; 7us; 78us; 7us; 20us; 65535us; 15us; 16us; 17us; 18us; 33us; 19us; 34us; 19us; 38us; 19us; 42us; 19us; 44us; 19us; 47us; 19us; 49us; 19us; 52us; 19us; 57us; 19us; 58us; 19us; 59us; 19us; 60us; 19us; 61us; 19us; 62us; 19us; 68us; 19us; 69us; 19us; 72us; 19us; 78us; 19us; 23us; 65535us; 15us; 24us; 17us; 24us; 20us; 21us; 22us; 23us; 26us; 27us; 33us; 24us; 34us; 24us; 38us; 24us; 42us; 24us; 44us; 24us; 47us; 24us; 49us; 24us; 52us; 24us; 57us; 24us; 58us; 24us; 59us; 24us; 60us; 24us; 61us; 24us; 62us; 24us; 68us; 24us; 69us; 24us; 72us; 24us; 78us; 24us; 25us; 65535us; 15us; 25us; 17us; 25us; 20us; 25us; 22us; 25us; 26us; 25us; 29us; 30us; 31us; 32us; 33us; 25us; 34us; 25us; 38us; 25us; 42us; 25us; 44us; 25us; 47us; 25us; 49us; 25us; 52us; 25us; 57us; 25us; 58us; 25us; 59us; 25us; 60us; 25us; 61us; 25us; 62us; 25us; 68us; 25us; 69us; 25us; 72us; 25us; 78us; 25us; 28us; 65535us; 0us; 67us; 15us; 36us; 17us; 36us; 20us; 36us; 22us; 36us; 26us; 36us; 29us; 36us; 31us; 36us; 33us; 36us; 34us; 36us; 38us; 36us; 42us; 36us; 44us; 36us; 47us; 36us; 49us; 36us; 52us; 36us; 57us; 36us; 58us; 36us; 59us; 36us; 60us; 36us; 61us; 36us; 62us; 36us; 65us; 67us; 68us; 36us; 69us; 36us; 72us; 36us; 78us; 36us; 80us; 67us; 4us; 65535us; 34us; 40us; 69us; 41us; 72us; 41us; 78us; 41us; 6us; 65535us; 34us; 46us; 42us; 43us; 44us; 45us; 69us; 46us; 72us; 46us; 78us; 46us; 9us; 65535us; 34us; 51us; 42us; 51us; 44us; 51us; 47us; 48us; 49us; 50us; 52us; 53us; 69us; 51us; 72us; 51us; 78us; 51us; 9us; 65535us; 34us; 54us; 42us; 54us; 44us; 54us; 47us; 54us; 49us; 54us; 52us; 54us; 69us; 54us; 72us; 54us; 78us; 54us; 3us; 65535us; 0us; 2us; 65us; 66us; 80us; 81us; 3us; 65535us; 0us; 64us; 65us; 64us; 80us; 64us; 3us; 65535us; 69us; 70us; 72us; 73us; 78us; 79us; 3us; 65535us; 69us; 76us; 72us; 76us; 78us; 76us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 22us; 43us; 67us; 93us; 122us; 127us; 134us; 144us; 154us; 158us; 162us; 166us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 3us; 2us; 3us; 13us; 9us; 2us; 3us; 13us; 27us; 28us; 29us; 30us; 31us; 32us; 3us; 2us; 3us; 16us; 8us; 2us; 3us; 27us; 28us; 29us; 30us; 31us; 32us; 3us; 2us; 3us; 27us; 3us; 2us; 3us; 28us; 3us; 2us; 3us; 29us; 3us; 2us; 3us; 30us; 3us; 2us; 3us; 31us; 3us; 2us; 3us; 32us; 3us; 2us; 3us; 36us; 1us; 2us; 3us; 2us; 5us; 6us; 1us; 3us; 3us; 3us; 5us; 6us; 3us; 4us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 2us; 13us; 33us; 1us; 13us; 1us; 14us; 2us; 15us; 16us; 1us; 16us; 1us; 16us; 3us; 17us; 18us; 33us; 3us; 17us; 18us; 42us; 1us; 17us; 3us; 17us; 20us; 21us; 1us; 18us; 3us; 18us; 20us; 21us; 3us; 19us; 20us; 21us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 2us; 34us; 35us; 1us; 34us; 1us; 34us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 2us; 40us; 41us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 42us; 1us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 12us; 22us; 26us; 35us; 39us; 43us; 47us; 51us; 55us; 59us; 63us; 65us; 69us; 71us; 75us; 79us; 81us; 83us; 85us; 87us; 89us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 111us; 113us; 115us; 118us; 120us; 122us; 126us; 130us; 132us; 136us; 138us; 142us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 208us; 210us; 212us; 214us; 216us; |]
let _fsyacc_action_rows = 82
let _fsyacc_actionTableElements = [|4us; 32768us; 8us; 69us; 10us; 72us; 14us; 75us; 31us; 37us; 0us; 49152us; 1us; 32768us; 7us; 3us; 0us; 16385us; 3us; 32768us; 2us; 15us; 3us; 17us; 6us; 35us; 9us; 32768us; 2us; 15us; 3us; 17us; 6us; 35us; 22us; 59us; 23us; 58us; 24us; 57us; 25us; 60us; 28us; 61us; 29us; 62us; 3us; 32768us; 2us; 15us; 3us; 17us; 27us; 39us; 8us; 32768us; 2us; 15us; 3us; 17us; 22us; 59us; 23us; 58us; 24us; 57us; 25us; 60us; 28us; 61us; 29us; 62us; 2us; 16411us; 2us; 15us; 3us; 17us; 2us; 16412us; 2us; 15us; 3us; 17us; 2us; 16413us; 2us; 15us; 3us; 17us; 2us; 16414us; 2us; 15us; 3us; 17us; 2us; 16415us; 2us; 15us; 3us; 17us; 2us; 16416us; 2us; 15us; 3us; 17us; 2us; 16420us; 2us; 15us; 3us; 17us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 2us; 16386us; 0us; 20us; 1us; 22us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 2us; 16387us; 0us; 20us; 1us; 22us; 2us; 16388us; 0us; 20us; 1us; 22us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16389us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16390us; 0us; 16391us; 1us; 16393us; 4us; 26us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16392us; 0us; 16394us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16395us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16396us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 0us; 16397us; 0us; 16398us; 1us; 16399us; 26us; 38us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16400us; 3us; 32768us; 6us; 63us; 17us; 42us; 19us; 44us; 3us; 32768us; 17us; 42us; 19us; 44us; 30us; 80us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 2us; 16401us; 18us; 47us; 20us; 49us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 2us; 16402us; 18us; 47us; 20us; 49us; 2us; 16403us; 18us; 47us; 20us; 49us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 0us; 16404us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 0us; 16405us; 0us; 16406us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 0us; 16417us; 1us; 16419us; 12us; 65us; 4us; 32768us; 8us; 69us; 10us; 72us; 14us; 75us; 31us; 37us; 0us; 16418us; 1us; 32768us; 13us; 68us; 5us; 32768us; 2us; 31us; 3us; 29us; 5us; 33us; 31us; 37us; 32us; 28us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 1us; 32768us; 9us; 71us; 0us; 16421us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 1us; 32768us; 11us; 74us; 0us; 16422us; 0us; 16423us; 1us; 16425us; 26us; 77us; 1us; 32768us; 27us; 78us; 8us; 32768us; 2us; 31us; 3us; 29us; 5us; 34us; 15us; 55us; 16us; 56us; 21us; 52us; 31us; 37us; 32us; 28us; 0us; 16424us; 4us; 32768us; 8us; 69us; 10us; 72us; 14us; 75us; 31us; 37us; 0us; 16426us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 13us; 23us; 27us; 36us; 39us; 42us; 45us; 48us; 51us; 54us; 57us; 63us; 66us; 72us; 75us; 78us; 84us; 85us; 91us; 92us; 93us; 95us; 101us; 102us; 103us; 109us; 110us; 116us; 117us; 123us; 132us; 133us; 134us; 136us; 142us; 143us; 147us; 151us; 160us; 163us; 172us; 175us; 178us; 187us; 188us; 197us; 198us; 199us; 208us; 209us; 210us; 211us; 212us; 218us; 224us; 230us; 236us; 242us; 248us; 249us; 251us; 256us; 257us; 259us; 265us; 274us; 276us; 277us; 286us; 288us; 289us; 290us; 292us; 294us; 303us; 304us; 309us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 1us; 4us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 1us; 4us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 16391us; 65535us; 65535us; 16392us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 65535us; 16397us; 16398us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 16405us; 16406us; 65535us; 16407us; 16408us; 16409us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 16423us; 65535us; 65535us; 65535us; 16424us; 65535us; 16426us; |]
let _fsyacc_reductions ()  =    [| 
# 313 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 322 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "CalculatorParser.fsp"
                                                       _1 
                   )
# 43 "CalculatorParser.fsp"
                 : command));
# 333 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CalculatorParser.fsp"
                                                           PlusExpr(_1,_3) 
                   )
# 53 "CalculatorParser.fsp"
                 : expr));
# 345 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CalculatorParser.fsp"
                                                           MinusExpr(_1,_3) 
                   )
# 54 "CalculatorParser.fsp"
                 : expr));
# 357 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CalculatorParser.fsp"
                                                           _1 
                   )
# 55 "CalculatorParser.fsp"
                 : expr));
# 368 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CalculatorParser.fsp"
                                                           TimesExpr(_1,_3) 
                   )
# 57 "CalculatorParser.fsp"
                 : expr));
# 380 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CalculatorParser.fsp"
                                                           DivExpr(_1,_3) 
                   )
# 58 "CalculatorParser.fsp"
                 : expr));
# 392 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CalculatorParser.fsp"
                                                           _1 
                   )
# 59 "CalculatorParser.fsp"
                 : expr));
# 403 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CalculatorParser.fsp"
                                                           PowExpr(_1,_3) 
                   )
# 61 "CalculatorParser.fsp"
                 : expr));
# 415 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CalculatorParser.fsp"
                                                           _1 
                   )
# 62 "CalculatorParser.fsp"
                 : expr));
# 426 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CalculatorParser.fsp"
                                                          Num(_1) 
                   )
# 64 "CalculatorParser.fsp"
                 : expr));
# 437 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CalculatorParser.fsp"
                                                          UMinusExpr(_2) 
                   )
# 65 "CalculatorParser.fsp"
                 : expr));
# 448 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CalculatorParser.fsp"
                                                       UPlusExpr(_2) 
                   )
# 66 "CalculatorParser.fsp"
                 : expr));
# 459 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CalculatorParser.fsp"
                                                          _2 
                   )
# 67 "CalculatorParser.fsp"
                 : expr));
# 470 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CalculatorParser.fsp"
                                                        _1
                   )
# 68 "CalculatorParser.fsp"
                 : expr));
# 481 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CalculatorParser.fsp"
                                                        Name(_1)
                   )
# 71 "CalculatorParser.fsp"
                 : expr));
# 492 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CalculatorParser.fsp"
                                                        NAMEArray(_1,_3)
                   )
# 72 "CalculatorParser.fsp"
                 : expr));
# 504 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CalculatorParser.fsp"
                                                         Or(_1,_3)
                   )
# 76 "CalculatorParser.fsp"
                 : boolean));
# 516 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CalculatorParser.fsp"
                                                           Oror(_1,_3)
                   )
# 77 "CalculatorParser.fsp"
                 : boolean));
# 528 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CalculatorParser.fsp"
                                                          _1
                   )
# 78 "CalculatorParser.fsp"
                 : boolean));
# 539 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CalculatorParser.fsp"
                                                          And(_1,_3)
                   )
# 80 "CalculatorParser.fsp"
                 : boolean));
# 551 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CalculatorParser.fsp"
                                                             Andand(_1,_3)
                   )
# 81 "CalculatorParser.fsp"
                 : boolean));
# 563 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CalculatorParser.fsp"
                                                           _1
                   )
# 82 "CalculatorParser.fsp"
                 : boolean));
# 574 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CalculatorParser.fsp"
                                                            Not(_2)
                   )
# 84 "CalculatorParser.fsp"
                 : boolean));
# 585 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CalculatorParser.fsp"
                                                            _1
                   )
# 85 "CalculatorParser.fsp"
                 : boolean));
# 596 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CalculatorParser.fsp"
                                                            Boolean(true)
                   )
# 87 "CalculatorParser.fsp"
                 : boolean));
# 606 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CalculatorParser.fsp"
                                                            Boolean(false)
                   )
# 88 "CalculatorParser.fsp"
                 : boolean));
# 616 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CalculatorParser.fsp"
                                                            GREATER(_1,_3)
                   )
# 89 "CalculatorParser.fsp"
                 : boolean));
# 628 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CalculatorParser.fsp"
                                                           Equal(_1,_3)
                   )
# 90 "CalculatorParser.fsp"
                 : boolean));
# 640 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CalculatorParser.fsp"
                                                              NOTEqual(_1,_3)
                   )
# 91 "CalculatorParser.fsp"
                 : boolean));
# 652 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CalculatorParser.fsp"
                                                             LESS(_1,_3)
                   )
# 92 "CalculatorParser.fsp"
                 : boolean));
# 664 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CalculatorParser.fsp"
                                                                  LESSEqual(_1,_3)
                   )
# 93 "CalculatorParser.fsp"
                 : boolean));
# 676 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CalculatorParser.fsp"
                                                                 GREATEREqual(_1,_3)
                   )
# 94 "CalculatorParser.fsp"
                 : boolean));
# 688 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CalculatorParser.fsp"
                                                            _2
                   )
# 95 "CalculatorParser.fsp"
                 : boolean));
# 699 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CalculatorParser.fsp"
                                                            TWOcommand(_1,_3)
                   )
# 98 "CalculatorParser.fsp"
                 : command));
# 711 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CalculatorParser.fsp"
                                                            _1
                   )
# 99 "CalculatorParser.fsp"
                 : command));
# 722 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CalculatorParser.fsp"
                                                            INIT(_1,_3)
                   )
# 101 "CalculatorParser.fsp"
                 : command));
# 734 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CalculatorParser.fsp"
                                                            IFFI (_2)
                   )
# 102 "CalculatorParser.fsp"
                 : command));
# 745 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CalculatorParser.fsp"
                                                            DOOD (_2)
                   )
# 103 "CalculatorParser.fsp"
                 : command));
# 756 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CalculatorParser.fsp"
                                                            Skip 
                   )
# 104 "CalculatorParser.fsp"
                 : command));
# 766 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : guardedC)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : guardedC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CalculatorParser.fsp"
                                                              TWOguardedC(_1,_4)
                   )
# 108 "CalculatorParser.fsp"
                 : guardedC));
# 778 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : guardedC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CalculatorParser.fsp"
                                                            _1
                   )
# 109 "CalculatorParser.fsp"
                 : guardedC));
# 789 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolean)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CalculatorParser.fsp"
                                                            Follows(_1,_3)
                   )
# 111 "CalculatorParser.fsp"
                 : guardedC));
|]
# 802 "CalculatorParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : command =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
