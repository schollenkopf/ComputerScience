// Signature file for parser generated by fsyacc
module CalculatorParser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | IFSTART
  | IFEND
  | DOSTART
  | DOEND
  | SCOLUMN
  | DEFINE
  | SKIP
  | TRUE
  | FALSE
  | OR
  | AND
  | OROR
  | ANDAND
  | NOT
  | NOTEQUAL
  | EQUAL
  | BIGGER
  | SMALLER
  | LSPAR
  | RSPAR
  | SMALLEREQUAL
  | BIGGEREQUAL
  | ARROW
  | NAME of (string)
  | NUM of (int)
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_IFSTART
    | TOKEN_IFEND
    | TOKEN_DOSTART
    | TOKEN_DOEND
    | TOKEN_SCOLUMN
    | TOKEN_DEFINE
    | TOKEN_SKIP
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_OROR
    | TOKEN_ANDAND
    | TOKEN_NOT
    | TOKEN_NOTEQUAL
    | TOKEN_EQUAL
    | TOKEN_BIGGER
    | TOKEN_SMALLER
    | TOKEN_LSPAR
    | TOKEN_RSPAR
    | TOKEN_SMALLEREQUAL
    | TOKEN_BIGGEREQUAL
    | TOKEN_ARROW
    | TOKEN_NAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression0
    | NONTERM_expression1
    | NONTERM_expression2
    | NONTERM_expression3
    | NONTERM_Name
    | NONTERM_boolean0
    | NONTERM_boolean1
    | NONTERM_boolean2
    | NONTERM_boolean3
    | NONTERM_command0
    | NONTERM_command1
    | NONTERM_guardedC
    | NONTERM_guardedC1
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (command) 
